# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

desc "Get current tag"
lane :get_current_tag do
  tags = sh('git tag --sort=-creatordate | head -n 1')
  tags
end

desc "Get commit counts"
lane :get_commits_count do |options|
  current_tag = get_current_tag
  current_commit = last_git_commit[:abbreviated_commit_hash]
  if options[:from_env]
    current_commit = ENV['SEMAPHORE_GIT_SHA']
  end
  git_log = sh('git log --oneline ' + current_tag.strip + '..' + current_commit.strip)
  count = git_log.lines.count.to_s
  puts count
  count
end

desc "Get generated build version"
lane :get_current_build_version do |options|
  total_commit = get_commits_count(options).to_i  # Ensure total_commit is an integer
  current_tag = get_current_tag.strip

  # Extract major and minor version from the current tag (assuming format vX.Y)
  version_parts = current_tag.sub('v', '').split('.')
  major_version = version_parts[0]
  minor_version = version_parts[1]

  # Increment the patch version based on the total commits since the last tag
  patch_version = total_commit

  # Set the new version in the format Major.Minor.Patch
  current_tag = "#{major_version}.#{minor_version}.#{patch_version}"
  puts current_tag
  current_tag
end




desc "Get generated build number"
lane :get_current_build_number do |options|
  sha_hex = last_git_commit[:abbreviated_commit_hash]
  build_number = sha_hex.to_i(16)  # Convert commit hash to integer as base build number
  if options[:build_version]
    previous_number = latest_testflight_build_number(version: options[:build_version]).to_s
    puts "Previous build number: #{previous_number}"
    # Check if previous_number is a valid number
    if previous_number.match?(/\d+/)
      previous_number = previous_number.to_f
      # If the current build number matches the previous build number, increment it
      if previous_number == build_number.to_f
        build_number = build_number + 0.1
      # If the previous number includes a decimal, increment the second part
      elsif previous_number.to_s.include?(".")
        parts = previous_number.to_s.split(".").map(&:to_i)
        if parts[0] == build_number
          build_number = build_number + ((parts[1] + 1) / 10.0)
        end
      end
    else
      # Handle case where the previous number isn't a valid number
      puts "Invalid previous build number. Using generated build number."
    end
  end
  puts "Generated build number: #{build_number}"
  build_number
end
